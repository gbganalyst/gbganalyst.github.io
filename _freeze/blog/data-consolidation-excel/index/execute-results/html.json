{
  "hash": "0d7ace65c5840e78c1906bbe3fe2d0de",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Data Consolidation: Automatically Merge Excel Sheets with Python\"\ndescription: |\n  Learn how to dynamically consolidate data from multiple Excel sheets into a single pandas DataFrame using Python. This tutorial covers automating sheet retrieval, merging data efficiently, and tracking source sheets—all while simplifying your data processing workflow. Perfect for streamlining recurring reports and handling complex datasets!\ndate: \"11-10-2022\"\njupyter: python3\ncategories: \n  - Python\nimage: pandas.jpg\nformat:\n  html:\n    df_print: paged\n    fig-cap-location: bottom\n    include-before-body: ../../html/margin_image.html\n    include-after-body: ../../html/blog_footer.html\n    code-fold: false\n    code-tools: true\neditor: \n  markdown: \n    wrap: sentence\nresources: \n  - \"pandas.jpg\"\n---\n\n\n# Introduction\n\nIn this tutorial, we will demonstrate how to automatically consolidate data from multiple sheets of an Excel file into a single pandas DataFrame. This approach is particularly useful when working with large Excel files that contain several sheets, especially when the number of sheets is unknown or subject to change. \n\nBy the end of this tutorial, you'll be able to:\n\n- Dynamically retrieve all sheet names from an Excel file.\n\n- Read data from each sheet and combine them into a single DataFrame.\n\n- Add a column to the final DataFrame that tracks the source sheet for each row.\n\nWe'll be using Python's popular libraries—`pandas` for data manipulation and `numpy` for numerical operations.\n\nOnce you have the `numpy` and `pandas` libraries installed, start by importing them. We will import `numpy` for numerical operations and `pandas` for data handling.\n\n::: {#6e2840d8 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n```\n:::\n\n\n## Step 1: Loading the Excel File and Retrieving Sheet Names\n\nThe first task is to load the Excel file and retrieve all available sheet names. We use the `pd.ExcelFile()` function to load the file, and the `sheet_names` attribute to dynamically retrieve the list of sheets.\n\n::: {#08328560 .cell execution_count=2}\n``` {.python .cell-code}\n# Load the Excel file\nexcel_file = pd.ExcelFile('Diamonds.xlsx')\n\n# Retrieve all sheet names\nsheet_names = excel_file.sheet_names\n```\n:::\n\n\nAt this point, `sheet_names` will be a list of all the sheet names in the Excel file. For example,\n\n::: {#91339d4c .cell execution_count=3}\n``` {.python .cell-code}\nsheet_names\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n['Fair', 'Good', 'Very Good', 'Premium', 'Ideal']\n```\n:::\n:::\n\n\n## Step 2: Reading and Concatenating Data from All Sheets\n\nWith the sheet names available, the next step is to read the data from each sheet and concatenate it into a single DataFrame. We use a dictionary comprehension to load each sheet into a DataFrame, and then use the `concat()` function to combine them. We also add a column that records the name of the sheet from which each row originated.\n\n::: {#034dc738 .cell execution_count=4}\n``` {.python .cell-code}\n# Read all sheets and concatenate them into one DataFrame, adding a sheet_name column\ndf_dict = {sheet: pd.read_excel(excel_file, sheet_name=sheet) for sheet in sheet_names}\n\ndata = pd.concat(df.assign(sheet_name=name) for name, df in df_dict.items())\n```\n:::\n\n\nThis code reads each sheet into a dictionary (`df_dict`), where the keys are sheet names and the values are DataFrames. The `concat()` function then merges all the DataFrames together into a single DataFrame, and the `sheet_name` column ensures that each row has a record of its original sheet.\n\n## Step 3: Inspecting the Combined Data\n\nOnce the data has been successfully consolidated, it's always a good practice to inspect it and verify that everything was combined correctly. The `head()` and `tail()` functions are useful for this.\n\n::: {#a76e28e8 .cell execution_count=5}\n``` {.python .cell-code}\n# View the first few rows of the data\ndata.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>carat</th>\n      <th>color</th>\n      <th>clarity</th>\n      <th>depth</th>\n      <th>table</th>\n      <th>price</th>\n      <th>x</th>\n      <th>y</th>\n      <th>z</th>\n      <th>sheet_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2.00</td>\n      <td>I</td>\n      <td>SI1</td>\n      <td>65.9</td>\n      <td>60.0</td>\n      <td>13764</td>\n      <td>7.80</td>\n      <td>7.73</td>\n      <td>5.12</td>\n      <td>Fair</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.70</td>\n      <td>H</td>\n      <td>SI1</td>\n      <td>65.2</td>\n      <td>58.0</td>\n      <td>2048</td>\n      <td>5.49</td>\n      <td>5.55</td>\n      <td>3.60</td>\n      <td>Fair</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.51</td>\n      <td>E</td>\n      <td>SI1</td>\n      <td>58.4</td>\n      <td>70.0</td>\n      <td>11102</td>\n      <td>7.55</td>\n      <td>7.39</td>\n      <td>4.36</td>\n      <td>Fair</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.70</td>\n      <td>D</td>\n      <td>SI2</td>\n      <td>65.5</td>\n      <td>57.0</td>\n      <td>1806</td>\n      <td>5.56</td>\n      <td>5.43</td>\n      <td>3.60</td>\n      <td>Fair</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.35</td>\n      <td>F</td>\n      <td>VVS1</td>\n      <td>54.6</td>\n      <td>59.0</td>\n      <td>1011</td>\n      <td>4.85</td>\n      <td>4.79</td>\n      <td>2.63</td>\n      <td>Fair</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#90c3fa68 .cell execution_count=6}\n``` {.python .cell-code}\n# View the last few rows of the data\ndata.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>carat</th>\n      <th>color</th>\n      <th>clarity</th>\n      <th>depth</th>\n      <th>table</th>\n      <th>price</th>\n      <th>x</th>\n      <th>y</th>\n      <th>z</th>\n      <th>sheet_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>55</th>\n      <td>0.41</td>\n      <td>E</td>\n      <td>VS1</td>\n      <td>62.3</td>\n      <td>57.0</td>\n      <td>1153</td>\n      <td>4.77</td>\n      <td>4.74</td>\n      <td>2.96</td>\n      <td>Ideal</td>\n    </tr>\n    <tr>\n      <th>56</th>\n      <td>0.40</td>\n      <td>E</td>\n      <td>VS1</td>\n      <td>62.1</td>\n      <td>55.0</td>\n      <td>898</td>\n      <td>4.75</td>\n      <td>4.79</td>\n      <td>2.96</td>\n      <td>Ideal</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>0.53</td>\n      <td>G</td>\n      <td>SI1</td>\n      <td>60.7</td>\n      <td>56.0</td>\n      <td>1371</td>\n      <td>5.22</td>\n      <td>5.27</td>\n      <td>3.18</td>\n      <td>Ideal</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>0.45</td>\n      <td>I</td>\n      <td>VS1</td>\n      <td>62.1</td>\n      <td>55.0</td>\n      <td>825</td>\n      <td>4.90</td>\n      <td>4.92</td>\n      <td>3.05</td>\n      <td>Ideal</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>1.03</td>\n      <td>G</td>\n      <td>SI1</td>\n      <td>61.6</td>\n      <td>55.0</td>\n      <td>5518</td>\n      <td>6.48</td>\n      <td>6.52</td>\n      <td>4.00</td>\n      <td>Ideal</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThis allows you to verify that:\n\n1. Data from all sheets has been loaded.\n\n2. The `sheet_name` column contains the correct sheet names for each row.\n\n## Step 4: Saving the Consolidated Data\n\nIf you want to save the consolidated data for further use, you can export it to a new Excel file or a CSV file using the following code:\n\n#### Saving to an Excel file:\n\n::: {#cd0dcb78 .cell execution_count=7}\n``` {.python .cell-code}\ndata.to_excel('Consolidated_Data.xlsx', index=False)\n```\n:::\n\n\n#### Saving to a CSV file:\n\n::: {#76f20b89 .cell execution_count=8}\n``` {.python .cell-code}\ndata.to_csv('Consolidated_Data.csv', index=False)\n```\n:::\n\n\n# Conclusion\n\nBy following this tutorial, you’ve learned how to automatically load and consolidate data from multiple Excel sheets into a single pandas DataFrame. This approach dynamically retrieves sheet names, making it flexible and scalable. You can now easily manage datasets that are spread across multiple Excel sheets without needing to manually specify the sheet names each time.\n\n### Additional Tips:\n\nIf the Excel sheets have varying structures (e.g., different column names), you might need to adjust how the sheets are concatenated, ensuring that data is aligned properly.\n\n::: {#1be7d029 .cell execution_count=9}\n``` {.python .cell-code}\n# Read all sheets and concatenate them, aligning columns by name\n\ndata = pd.concat([df_dict[sheet] for sheet in sheet_names], ignore_index=True, sort=False)\n\n```\n:::\n\n\nThe `sort = False` parameter prevents pandas from automatically sorting the columns alphabetically, preserving their original order.\n\n",
    "supporting": [
      "index_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}